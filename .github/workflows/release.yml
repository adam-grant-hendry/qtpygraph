name: Release

on:
  push:
    tags:
      - "*.*.*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    strategy:
      matrix:
        os: [Windows, macOS, Ubuntu]
        python-version: ["3.8", "3.9", "3.10"]
        include:
          - os: Ubuntu
            image: ubuntu-22.04
          - os: Windows
            image: windows-2022
          - os: MacOS
            image: macos-12
      fail-fast: false

    defaults:
      run:
        shell: bash

    name: Release - ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.image }}

    steps:
      - name: Check out the Repository
        uses: actions/checkout@v3

      - name: Get Tag
        run: echo "GIT_TAG=`echo $(git describe --tags --abbrev=0)`" >> $GITHUB_ENV

      - name: Update Ubuntu
        if: matrix.os == 'Ubuntu'
        run: |
          sudo apt update -y
          sudo apt install -y libgles2-mesa-dev

      - name: Install `python` ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Print `python` Version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install and Configure Poetry
        uses: snok/install-poetry@v1.3.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Print `poetry` Version
        run: poetry --version

      - name: Setup `python` Cache
        uses: actions/cache@v3
        id: python-cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Verify `python` Cache is Healthy
        if: steps.python-cache.outputs.cache-hit == 'true'
        run: |
          # `timeout` is not available on macOS, so we define a custom function.
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

          # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Setup `tox` Cache
        uses: actions/cache@v3
        id: tox-cache
        with:
          path: .tox
          key: tox-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          poetry run pip install --upgrade pip
          poetry install --no-root
          poetry run python -m pip install tox-gh-actions
          poetry run python -m pip install pytest-github-actions-annotate-failures

      - name: Copy Stubs to `.venv/lib/python*/site-packages`` (MacOS/Ubuntu)
        if: matrix.os != 'Windows'
        run: |
          cp -R stubs/PySide6-stubs/* .venv/lib/python*/site-packages/
          cp -R stubs/pytestqt-stubs/* .venv/lib/python*/site-packages/

      - name: Copy Stubs to `.venv/Lib/site-packages`` (Windows)
        if: matrix.os == 'Windows'
        run: |
          cp -R stubs/PySide6-stubs/* .venv/Lib/site-packages/
          cp -R stubs/pytestqt-stubs/* .venv/Lib/site-packages/

      - name: Get Incremented Changelog
        id: cz
        # Only runs on Ubuntu, but we only need this performed once
        if: matrix.os == 'Ubuntu'
        uses: commitizen-tools/commitizen-action@0.15.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          changelog_increment_filename: changes.md
          push: false
          commit: false

      - name: Build Project
        run: poetry build

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: matrix.os == 'Ubuntu'
        with:
          files: "dist/*"
          body_path: "changes.md"
          tag_name: ${{ env.GIT_TAG }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: matrix.os != 'Ubuntu'
        with:
          files: "dist/*"
          tag_name: ${{ env.GIT_TAG }}

      - name: Upload To PyPI
        env:
          PYPI_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi $PYPI_PASSWORD
          poetry publish --repository test-pypi --skip-existing --username $PYPI_USERNAME --password $PYPI_PASSWORD
