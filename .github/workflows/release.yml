name: Release

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create-release:
    if: "!startsWith(github.event.head_commit.message, 'ðŸš€ bump:')"

    name: Create Release
    runs-on: ubuntu-22.04

    defaults:
      run:
        shell: bash

    steps:
      - name: Check out the Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Setup `python` 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Setup GPG
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.CI_GPG_KEY }}
          passphrase: ${{ secrets.CI_GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Bump Version and Create Changelog
        id: cz
        env:
          CI_USER_NAME: ${{ steps.gpg.outputs.name }}
          CI_USER_EMAIL: ${{ steps.gpg.outputs.email }}
          CI_SIGNINGKEY: ${{ steps.gpg.outputs.keyid }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          echo "Install commitizen"
          pip install git+https://github.com/adam-grant-hendry/commitizen.git@feat/unicode

          echo "Configure Git..."
          git config --local user.name "${CI_USER_NAME}"
          git config --local user.email "${CI_USER_EMAIL}"
          git config --local user.signingkey "${CI_SIGNINGKEY}"
          git config --local pull.rebase true
          git config --local commit.gpgsign true
          git config --local tag.gpgsign true

          echo "Bump version..."
          OLD_VERSION="$(cz version --project)"

          cz --no-raise 21 bump \
          --yes \
          --gpg-sign \
          --changelog \
          --check-consistency \
          --changelog-to-stdout > changes.md

          NEW_VERSION="$(cz version --project)"
          CURRENT_BRANCH="$(git branch --show-current)"
          INPUT_BRANCH="${INPUT_BRANCH:-$CURRENT_BRANCH}"
          INPUT_REPOSITORY="${INPUT_REPOSITORY:-$GITHUB_REPOSITORY}"
          REMOTE_REPO="https://${GITHUB_ACTOR}:${PERSONAL_ACCESS_TOKEN}@github.com/${INPUT_REPOSITORY}.git"

          echo "Push to branch..."
          git pull "$REMOTE_REPO" "$INPUT_BRANCH"
          git push "$REMOTE_REPO" "HEAD:${INPUT_BRANCH}" --tags

          # Output version number for next steps
          echo "REVISION=${NEW_VERSION}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          body_path: "changes.md"
          files: |
            LICENSE
          tag_name: ${{ steps.cz.outputs.REVISION }}
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  build-wheels:
    needs: [create-release]

    strategy:
      matrix:
        os: [Windows, macOS, Ubuntu]
        python-version: ["3.8", "3.9", "3.10"]
        include:
          - os: Ubuntu
            image: ubuntu-22.04
          - os: Windows
            image: windows-2022
          - os: MacOS
            image: macos-12
      fail-fast: false

    defaults:
      run:
        shell: bash

    name: Build - ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.image }}

    steps:
      - name: Check out the Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Update Repository to New Version
        run: |
          git pull

      - name: Get Version Tag
        id: git-tag
        run: |
          echo ::set-output name=semver::$(git describe --tags --abbrev=0)

      - name: Update Ubuntu
        if: matrix.os == 'Ubuntu'
        run: |
          sudo apt update -y
          sudo apt install -y libgles2-mesa-dev

      - name: Install `python` ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Print `python` Version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install and Configure Poetry
        uses: snok/install-poetry@v1.3.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Print `poetry` Version
        run: poetry --version

      - name: Setup `python` Cache
        uses: actions/cache@v3
        id: python-cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Verify `python` Cache is Healthy
        if: steps.python-cache.outputs.cache-hit == 'true'
        run: |
          # `timeout` is not available on macOS, so we define a custom function.
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

          # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install Dependencies
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          poetry run pip install --upgrade pip
          poetry install --no-root --without dev
          poetry run python -m pip install tox-gh-actions
          poetry run python -m pip install pytest-github-actions-annotate-failures

      - name: Copy Stubs to `.venv/lib/python*/site-packages`` (MacOS/Ubuntu)
        if: matrix.os != 'Windows'
        run: |
          cp -R stubs/PySide6-stubs/* .venv/lib/python*/site-packages/
          cp -R stubs/pytestqt-stubs/* .venv/lib/python*/site-packages/

      - name: Copy Stubs to `.venv/Lib/site-packages`` (Windows)
        if: matrix.os == 'Windows'
        run: |
          cp -R stubs/PySide6-stubs/* .venv/Lib/site-packages/
          cp -R stubs/pytestqt-stubs/* .venv/Lib/site-packages/

      - name: Build Project
        run: poetry build

      - name: Upload Wheel to Release
        uses: ncipollo/release-action@v1.11.1
        with:
          artifacts: |
            dist/*.tar.gz
          allowUpdates: true
          tag: ${{ steps.git-tag.outputs.semver }}
          omitBodyDuringUpdate: true
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Upload Wheel To PyPI
        env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          poetry config pypi-token.pypi $PYPI_PASSWORD
          poetry publish --skip-existing --username $PYPI_USERNAME --password $PYPI_PASSWORD
