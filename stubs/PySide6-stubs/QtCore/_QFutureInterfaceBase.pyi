"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

License: MIT
"""
"""
This file contains the exact signatures for all functions in module
PySide6.QtCore, except for defaults which are replaced by "...".
"""
from __future__ import annotations

from enum import IntFlag
from typing import overload

import PySide6.QtCore

class QFutureInterfaceBase:
    NoState: QFutureInterfaceBase.State = ...
    Running: QFutureInterfaceBase.State = ...
    Started: QFutureInterfaceBase.State = ...
    Finished: QFutureInterfaceBase.State = ...
    Canceled: QFutureInterfaceBase.State = ...
    Suspending: QFutureInterfaceBase.State = ...
    Suspended: QFutureInterfaceBase.State = ...
    Throttled: QFutureInterfaceBase.State = ...
    Pending: QFutureInterfaceBase.State = ...

    class State(IntFlag):
        NoState: QFutureInterfaceBase.State = ...
        Running: QFutureInterfaceBase.State = ...
        Started: QFutureInterfaceBase.State = ...
        Finished: QFutureInterfaceBase.State = ...
        Canceled: QFutureInterfaceBase.State = ...
        Suspending: QFutureInterfaceBase.State = ...
        Suspended: QFutureInterfaceBase.State = ...
        Throttled: QFutureInterfaceBase.State = ...
        Pending: QFutureInterfaceBase.State = ...
    @overload
    def __init__(
        self, initialState: PySide6.QtCore.QFutureInterfaceBase.State = ...
    ) -> None: ...
    @overload
    def __init__(self, other: PySide6.QtCore.QFutureInterfaceBase) -> None: ...
    def cancel(self) -> None: ...
    def derefT(self) -> bool: ...
    def expectedResultCount(self) -> int: ...
    def isCanceled(self) -> bool: ...
    def isFinished(self) -> bool: ...
    def isPaused(self) -> bool: ...
    def isProgressUpdateNeeded(self) -> bool: ...
    def isResultReadyAt(self, index: int) -> bool: ...
    def isRunning(self) -> bool: ...
    def isRunningOrPending(self) -> bool: ...
    def isStarted(self) -> bool: ...
    def isSuspended(self) -> bool: ...
    def isSuspending(self) -> bool: ...
    def isThrottled(self) -> bool: ...
    def isValid(self) -> bool: ...
    def launchAsync(self) -> bool: ...
    def loadState(self) -> int: ...
    def mutex(self) -> PySide6.QtCore.QMutex: ...
    def progressMaximum(self) -> int: ...
    def progressMinimum(self) -> int: ...
    def progressText(self) -> str: ...
    def progressValue(self) -> int: ...
    def queryState(self, state: PySide6.QtCore.QFutureInterfaceBase.State) -> bool: ...
    def refT(self) -> bool: ...
    def reportCanceled(self) -> None: ...
    def reportFinished(self) -> None: ...
    def reportResultsReady(self, beginIndex: int, endIndex: int) -> None: ...
    def reportStarted(self) -> None: ...
    def reportSuspended(self) -> None: ...
    def reset(self) -> None: ...
    def resultCount(self) -> int: ...
    def rethrowPossibleException(self) -> None: ...
    def runContinuation(self) -> None: ...
    def setExpectedResultCount(self, resultCount: int) -> None: ...
    def setFilterMode(self, enable: bool) -> None: ...
    def setLaunchAsync(self, value: bool) -> None: ...
    def setPaused(self, paused: bool) -> None: ...
    def setProgressRange(self, minimum: int, maximum: int) -> None: ...
    def setProgressValue(self, progressValue: int) -> None: ...
    def setProgressValueAndText(self, progressValue: int, progressText: str) -> None: ...
    def setRunnable(self, runnable: PySide6.QtCore.QRunnable) -> None: ...
    def setSuspended(self, suspend: bool) -> None: ...
    def setThreadPool(self, pool: PySide6.QtCore.QThreadPool) -> None: ...
    def setThrottled(self, enable: bool) -> None: ...
    def suspendIfRequested(self) -> None: ...
    def swap(self, other: PySide6.QtCore.QFutureInterfaceBase) -> None: ...
    def threadPool(self) -> PySide6.QtCore.QThreadPool: ...
    def togglePaused(self) -> None: ...
    def toggleSuspended(self) -> None: ...
    def waitForFinished(self) -> None: ...
    def waitForNextResult(self) -> bool: ...
    def waitForResult(self, resultIndex: int) -> None: ...
    def waitForResume(self) -> None: ...
