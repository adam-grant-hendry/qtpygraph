"""
PySide stub files generated by **IceSpringPySideStubs**

Home: https://baijifeilong.github.io/2022/01/06/ice-spring-pyside-stubs/index.html

Github: https://github.com/baijifeilong/IceSpringPySideStubs

PyPI(PySide2): https://pypi.org/project/IceSpringPySideStubs-PySide2

PyPI(PySide6): https://pypi.org/project/IceSpringPySideStubs-PySide6

PyPI(PyQt5): https://pypi.org/project/IceSpringPySideStubs-PyQt5

PyPI(PyQt6): https://pypi.org/project/IceSpringPySideStubs-PyQt6

Generated by BaiJiFeiLong@gmail.com

License: MIT
"""
"""
This file contains the exact signatures for all functions in module
PySide6.QtWidgets, except for defaults which are replaced by "...".
"""
from __future__ import annotations

import PySide6.QtCore
import PySide6.QtGui
import PySide6.QtWidgets

class QWidgetItem(PySide6.QtWidgets.QLayoutItem):
    """
    https://doc.qt.io/qt-6/qwidgetitem.html

    **Detailed Description**

    Normally, you don't need to use this class directly. Qt's built-in layout
    managers provide the following functions for manipulating widgets in
    layouts:

    ClassFunctions
    **QBoxLayout** **addWidget** (), **insertWidget** (),
    **setStretchFactor** ()
    **QGridLayout** **addWidget** ()
    **QStackedLayout** **addWidget** (), **insertWidget** (), **currentWidget**
    (), **setCurrentWidget** (), **widget** ()

    **See also** **QLayout** , **QSpacerItem** , and **QLayoutItem::widget** ().
    """

    def __init__(self, w: PySide6.QtWidgets.QWidget) -> None:
        """
        https://doc.qt.io/qt-6/qwidgetitem.html#QWidgetItem-1

        **QWidgetItem::QWidgetItem(QWidget * widget )**

        Creates an item containing the given **widget**.
        """
        ...
    def controlTypes(self) -> PySide6.QtWidgets.QSizePolicy.ControlTypes:
        """
        https://doc.qt.io/qt-6/qwidgetitem.html#controlTypes

        **[override virtual] QSizePolicy::ControlTypes
        QWidgetItem::controlTypes() const**

        Reimplements: **QLayoutItem::controlTypes() const** .

        Returns the control type associated with the widget for which this size
        policy applies.

        **See also** **QSizePolicy::controlType** ().
        """
        ...
    def expandingDirections(self) -> PySide6.QtCore.Qt.Orientations:
        """
        https://doc.qt.io/qt-6/qwidgetitem.html#expandingDirections

        **[override virtual] Qt::Orientations QWidgetItem::expandingDirections()
        const**

        Reimplements: **QLayoutItem::expandingDirections() const** .
        """
        ...
    def geometry(self) -> PySide6.QtCore.QRect:
        """
        https://doc.qt.io/qt-6/qwidgetitem.html#geometry

        **[override virtual] QRect QWidgetItem::geometry() const**

        Reimplements: **QLayoutItem::geometry() const** .

        **See also** **setGeometry** ().
        """
        ...
    def hasHeightForWidth(self) -> bool:
        """
        https://doc.qt.io/qt-6/qwidgetitem.html#hasHeightForWidth

        **[override virtual] bool QWidgetItem::hasHeightForWidth() const**

        Reimplements: **QLayoutItem::hasHeightForWidth() const** .
        """
        ...
    def heightForWidth(self, arg__1: int) -> int:
        """
        https://doc.qt.io/qt-6/qwidgetitem.html#heightForWidth

        **[override virtual] int QWidgetItem::heightForWidth(int w ) const**

        Reimplements: **QLayoutItem::heightForWidth(int) const** .
        """
        ...
    def isEmpty(self) -> bool:
        """
        https://doc.qt.io/qt-6/qwidgetitem.html#isEmpty

        **[override virtual] bool QWidgetItem::isEmpty() const**

        Reimplements: **QLayoutItem::isEmpty() const** .

        Returns `true` if the widget is hidden; otherwise returns `false`.

        **See also** **QWidget::isHidden** ().
        """
        ...
    def maximumSize(self) -> PySide6.QtCore.QSize:
        """
        https://doc.qt.io/qt-6/qwidgetitem.html#maximumSize

        **[override virtual] QSize QWidgetItem::maximumSize() const**

        Reimplements: **QLayoutItem::maximumSize() const** .
        """
        ...
    def minimumHeightForWidth(self, arg__1: int) -> int: ...
    def minimumSize(self) -> PySide6.QtCore.QSize:
        """
        https://doc.qt.io/qt-6/qwidgetitem.html#minimumSize

        **[override virtual] QSize QWidgetItem::minimumSize() const**

        Reimplements: **QLayoutItem::minimumSize() const** .
        """
        ...
    def setGeometry(self, arg__1: PySide6.QtCore.QRect) -> None:
        """
        https://doc.qt.io/qt-6/qwidgetitem.html#setGeometry

        **[override virtual] void QWidgetItem::setGeometry(const QRect & rect
        )**

        Reimplements: **QLayoutItem::setGeometry** (const QRect &r).

        **See also** **geometry** ().
        """
        ...
    def sizeHint(self) -> PySide6.QtCore.QSize:
        """
        https://doc.qt.io/qt-6/qwidgetitem.html#sizeHint

        **[override virtual] QSize QWidgetItem::sizeHint() const**

        Reimplements: **QLayoutItem::sizeHint() const** .
        """
        ...
    def widget(self) -> PySide6.QtWidgets.QWidget:
        """
        https://doc.qt.io/qt-6/qwidgetitem.html#widget

        **[override virtual] QWidget *QWidgetItem::widget() const**

        Reimplements: **QLayoutItem::widget() const** .

        Returns the widget managed by this item.
        """
        ...
