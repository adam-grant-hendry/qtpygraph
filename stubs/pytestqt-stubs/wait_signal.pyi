from __future__ import annotations

from _typeshed import Incomplete

class _AbstractSignalBlocker:
    timeout: Incomplete
    signal_triggered: bool
    raising: Incomplete
    def __init__(self, timeout: int = ..., raising: bool = ...) -> None: ...
    def wait(self) -> None: ...
    def determine_signal_name(self, potential_signal_tuple): ...
    def get_callback_name(self, callback): ...
    @staticmethod
    def get_signal_from_potential_signal_tuple(signal_tuple): ...
    def __enter__(self): ...
    def __exit__(self, type, value, traceback) -> None: ...

class SignalBlocker(_AbstractSignalBlocker):
    args: Incomplete
    all_args: Incomplete
    check_params_callback: Incomplete
    signal_name: str
    def __init__(
        self,
        timeout: int = ...,
        raising: bool = ...,
        check_params_cb: Incomplete | None = ...,
    ) -> None: ...
    def connect(self, signal) -> None: ...
    def get_params_as_str(self): ...

class SignalAndArgs:
    signal_name: Incomplete
    args: Incomplete
    def __init__(self, signal_name, args) -> None: ...
    def __eq__(self, other): ...

def get_ordinal_str(n): ...

class NoMatchingIndexFoundError(Exception): ...

class MultiSignalBlocker(_AbstractSignalBlocker):
    all_signals_and_args: Incomplete
    def __init__(
        self,
        timeout: int = ...,
        raising: bool = ...,
        check_params_cbs: Incomplete | None = ...,
        order: str = ...,
    ) -> None: ...
    def add_signals(self, signals) -> None: ...

class SignalEmittedSpy:
    signal: Incomplete
    emitted: bool
    args: Incomplete
    def __init__(self, signal) -> None: ...
    def slot(self, *args) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type, value, traceback) -> None: ...
    def assert_not_emitted(self) -> None: ...

class CallbackBlocker:
    timeout: Incomplete
    raising: Incomplete
    args: Incomplete
    kwargs: Incomplete
    called: bool
    def __init__(self, timeout: int = ..., raising: bool = ...) -> None: ...
    def wait(self) -> None: ...
    def assert_called_with(self, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type, value, traceback) -> None: ...

class SignalEmittedError(Exception): ...
class CallbackCalledTwiceError(Exception): ...
